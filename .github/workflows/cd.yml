# .github/workflows/cd-macmini.yml
name: CD - Deploy on Macmini

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: [self-hosted, macmini]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve dynamic paths (no hardcoding)
        run: |
          if [ -n "${{ vars.DEPLOY_DIR }}" ]; then
            echo "DEPLOY_DIR=${{ vars.DEPLOY_DIR }}" >> "$GITHUB_ENV"
          else
            echo "DEPLOY_DIR=$HOME/Documents" >> "$GITHUB_ENV"
          fi
          if [ -n "${{ vars.DOCKER_CONFIG }}" ]; then
            echo "DOCKER_CONFIG=${{ vars.DOCKER_CONFIG }}" >> "$GITHUB_ENV"
          else
            echo "DOCKER_CONFIG=$RUNNER_TEMP/.docker" >> "$GITHUB_ENV"
          fi

      - name: Show resolved paths
        run: |
          echo "DEPLOY_DIR=$DEPLOY_DIR"
          echo "DOCKER_CONFIG=$DOCKER_CONFIG"

      - name: Quick daemon & context check
        run: |
          set -euxo pipefail
          docker version
          docker info
          docker context ls

      # Keychain 우회: 잡 전용 docker config 생성 + credsStore 비활성화
      - name: Prepare per-job Docker config (bypass Keychain)
        run: |
          set -euxo pipefail
          mkdir -p "$DOCKER_CONFIG"
          printf '%s\n' '{"auths": {}, "credsStore": ""}' > "$DOCKER_CONFIG/config.json"
          cat "$DOCKER_CONFIG/config.json"

      # 네트워크 확인(느리면 여기서 보임)
      - name: Network sanity check to Docker Hub
        run: |
          set -euxo pipefail
          curl -I --max-time 10 https://registry-1.docker.io/v2/ || true

      # 기존의 `echo "***" | docker login` 제거
      #    명시적 --config로 로그인(타임아웃 포함)
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Ensure compose files exist
        run: |
          set -euxo pipefail
          ls -al "$DEPLOY_DIR"
          test -f "$DEPLOY_DIR/docker-compose.yml"

      # compose에도 동일한 --config 사용(일관성)
      - name: Pull images with compose
        working-directory: ${{ env.DEPLOY_DIR }}
        run: docker --config "$DOCKER_CONFIG" compose pull
        timeout-minutes: 10

      - name: Deploy with compose
        working-directory: ${{ env.DEPLOY_DIR }}
        run: docker --config "$DOCKER_CONFIG" compose up -d

      - name: Check containers
        run: docker --config "$DOCKER_CONFIG" ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
